/**
 * typology - A type checking library for Node.js and the browser.
 * @version v0.1.0
 * @link https://github.com/jacomyal/typology
 * @license MIT
 */
!function(e){"use strict";var t,r,i="Boolean Number String Function Array Date RegExp Object".split(" "),n={},o=["*"],s={};for(t in i)r=i[t],o.push(r.toLowerCase()),n["[object "+r+"]"]=r.toLowerCase();var f={version:"0.1.0",add:function(e,t){var r,i,n,f,a,h;if(1===arguments.length){if("object"!==this.get(e))throw new Error("If types.add is called with one argument, this one has to be an object.");r=e,f=r.id,h=r.type}else{if(2!==arguments.length)throw new Error("types.add has to be called with one or three arguments.");if("string"!=typeof e||!e)throw new Error("If types.add is called with more than one argument, the first one must be the string id.");f=e,h=t}if("string"!==this.get(f)||0===f.length)throw new Error("A type requires an string id.");if(void 0!==s[f]&&"proto"!==s[f])throw new Error('The type "'+f+'" already exists.');if(~o.indexOf(f))throw new Error('"'+f+'" is a reserved type name.');s[f]=1,n=(r||{}).proto||[],n=Array.isArray(n)?n:[n],a={};for(i in n)void 0===s[n[i]]&&(s[n[i]]=1,a[n[i]]=1);if("function"!==this.get(h)&&!this.isValid(h))throw new Error("A type requires a valid definition. This one can be a preexistant type or else a function testing given objects.");if(s[f]=void 0===r?{id:f,type:h}:{},void 0!==r)for(i in r)s[f][i]=r[i];for(i in a)i!==f&&delete s[i]},has:function(e){return!!s[e]},get:function(e){return null===e||void 0===e?String(e):n[Object.prototype.toString.call(e)]||"object"},check:function(e,t){var r,i,n,f=this.get(e);if("string"===this.get(t)){r=t.replace(/^\?/,"").split(/\|/);for(i in r)if(o.indexOf(r[i])<0&&!(r[i]in s))throw new Error("Invalid type.");if(null===e||void 0===e)return!!t.match(/^\?/,"");t=t.replace(/^\?/,"");for(i in r)if(s[r[i]]&&("function"==typeof s[r[i]].type?s[r[i]].type(e)===!0:this.check(e,s[r[i]].type)))return!0;return!(!~r.indexOf("*")&&!~r.indexOf(f))}if("object"===this.get(t)){if("object"!==f)return!1;for(n in t)if(!this.check(e[n],t[n]))return!1;for(n in e)if(void 0===t[n])return!1;return!0}if("array"===this.get(t)){if("array"!==f)return!1;if(1!==t.length)throw new Error("Invalid type.");for(n in e)if(!this.check(e[n],t[0]))return!1;return!0}return!1},isValid:function(e){var t,r,i;if("string"===this.get(e)){t=e.replace(/^\?/,"").split(/\|/);for(i in t)if(o.indexOf(t[i])<0&&!(t[i]in s))return!1;return!0}if("object"===this.get(e)){for(r in e)if(!this.isValid(e[r]))return!1;return!0}return"array"===this.get(e)&&1===e.length?this.isValid(e[0]):!1}};f.add("type",function(e){return f.isValid(e)}),"undefined"!=typeof exports&&("undefined"!=typeof module&&module.exports&&(exports=module.exports=f),exports.types=f),e.types=f}(this);