/**
 * typology - A data validation library for Node.js and the browser.
 * @version v0.1.1
 * @link https://github.com/jacomyal/typology
 * @license MIT
 */
!function(){"use strict";function t(t){if(t=t||{},this.customTypes={},this.add("type",function(t){return this.isValid(t)}.bind(this)),this.add("primitive",function(t){return!t||!(t instanceof Object||"object"==typeof t)}),"object"!==this.get(t))throw Error("Invalid argument.");for(var e in t)this.add(e,t[e])}var e,i,r=["Arguments","Boolean","Number","String","Function","Array","Date","RegExp","Object"],n={},o=["*"];for(e in r)i=r[e],o.push(i.toLowerCase()),n["[object "+i+"]"]=i.toLowerCase();t.prototype.add=function(t,e){var i,r,n,s,h,f;if(1===arguments.length){if("object"!==this.get(t))throw new Error("If types.add is called with one argument, this one has to be an object.");i=t,s=i.id,f=i.type}else{if(2!==arguments.length)throw new Error("types.add has to be called with one or three arguments.");if("string"!=typeof t||!t)throw new Error("If types.add is called with more than one argument, the first one must be the string id.");s=t,f=e}if("string"!==this.get(s)||0===s.length)throw new Error("A type requires an string id.");if(void 0!==this.customTypes[s]&&"proto"!==this.customTypes[s])throw new Error('The type "'+s+'" already exists.');if(~o.indexOf(s))throw new Error('"'+s+'" is a reserved type name.');this.customTypes[s]=1,n=(i||{}).proto||[],n=Array.isArray(n)?n:[n],h={};for(r in n)void 0===this.customTypes[n[r]]&&(this.customTypes[n[r]]=1,h[n[r]]=1);if("function"!==this.get(f)&&!this.isValid(f))throw new Error("A type requires a valid definition. This one can be a preexistant type or else a function testing given objects.");if(this.customTypes[s]=void 0===i?{id:s,type:f}:{},void 0!==i)for(r in i)this.customTypes[s][r]=i[r];for(r in h)r!==s&&delete this.customTypes[r];return this},t.prototype.has=function(t){return!!this.customTypes[t]},t.prototype.get=function(t){return null===t||void 0===t?String(t):n[Object.prototype.toString.call(t)]||"object"},t.prototype.check=function(t,e){var i,r,n,s=!1,h=!1,f=this.get(t);if("string"===this.get(e)){i=e.replace(/^[?!]/,"").split(/\|/);for(r in i)if(o.indexOf(i[r])<0&&!(i[r]in this.customTypes))throw new Error("Invalid type.");e.match(/^\?/)&&(s=!0,e=e.replace(/^\?/,"")),e.match(/^!/)&&(h=!0,e=e.replace(/^!/,""));for(r in i)if(this.customTypes[i[r]]&&("function"==typeof this.customTypes[i[r]].type?this.customTypes[i[r]].type(t)===!0:this.check(t,this.customTypes[i[r]].type)))return!h;return null===t||void 0===t?h?!s:s:h?!(~i.indexOf("*")||~i.indexOf(f)):!(!~i.indexOf("*")&&!~i.indexOf(f))}if("object"===this.get(e)){if("object"!==f)return!1;for(n in e)if(!this.check(t[n],e[n]))return!1;for(n in t)if(void 0===e[n])return!1;return!0}if("array"===this.get(e)){if("array"!==f)return!1;if(1!==e.length)throw new Error("Invalid type.");for(n in t)if(!this.check(t[n],e[0]))return!1;return!0}return!1},t.prototype.isValid=function(t){var e,i,r;if("string"===this.get(t)){e=t.replace(/^[?!]/,"").split(/\|/);for(r in e)if(o.indexOf(e[r])<0&&!(e[r]in this.customTypes))return!1;return!0}if("object"===this.get(t)){for(i in t)if(!this.isValid(t[i]))return!1;return!0}return"array"===this.get(t)&&1===t.length?this.isValid(t[0]):!1};var s=new t;Object.defineProperty(s,"version",{value:"0.1.1"}),s.Typology=t,"undefined"!=typeof exports?("undefined"!=typeof module&&module.exports&&(exports=module.exports=s),exports.types=s):"function"==typeof define&&define.amd?define("typology",[],function(){return s}):this.types=s}(this);